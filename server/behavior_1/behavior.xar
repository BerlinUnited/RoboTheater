<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Python Script" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="212" y="90"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from __future__ import print_function

# note this for Pythong 2.7 and 3.x compatibility
try:
  from SimpleHTTPServer import SimpleHTTPRequestHandler
  import SocketServer as socketserver
except ImportError:
  from http.server import SimpleHTTPRequestHandler
  import socketserver

# this makes it possible to run the script without naqi for testing purposes
try:
  import qi

  HAS_NAOQI = True
except ImportError:
  HAS_NAOQI = False


import traceback
import json

PORT = 8000

class NaoQIManager:
    def __init__(self):
      self.services = {}

      # create a connect a local session
      self.session = qi.Session()
      self.session.connect("tcp://localhost:9559")

    # make a call to a service
    def call(self, service, call):
        if not HAS_NAOQI:
          print("WARNING: HAS_NAOQI")

        # service is not connected yet
        if not service in self.services:
          print("Connect to Proxy: {}".format(service))

          if HAS_NAOQI:
            self.services[service] = self.session.service(service)

        print("call {}({})".format(service, call))
        if HAS_NAOQI:
          return self.services[service].call(*call)

        return None


class NaoQiHandler(SimpleHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    '''
    def do_GET(self):
        #super().do_GET()
        #super(NaoQiHandler, self).do_GET()
        import os
        self._set_headers()
        self.wfile.write(str(path).encode("utf8"))
    '''

    def do_HEAD(self):
        self._set_headers()

    def run_naoqi(self, service, call):
        # create a naoqi manager if not avaliable yet
        if not hasattr(self, 'naoqi'):
            self.naoqi = NaoQIManager()

        # encode everything as ascii, this is crucial
        service = service.encode('ascii')
        call = [c.encode('ascii') for c in call]

        return self.naoqi.call(service, call)


    def do_POST(self):
        try:
          # get the length of the data to read
          # python 2.7
          if hasattr(self.headers, 'getheader'):
            length = int(self.headers.getheader('content-length'))
          else: # python 3.x
            length = int(self.headers.get('content-length'))

          data = self.rfile.read(length)

          # parse json data
          msg = json.loads(data)
          print(msg)

          # forward the call to naoqi
          result = self.run_naoqi(msg['proxy'], msg['call'])

          # sed a response
          self._set_headers()
          self.wfile.write(str(result).encode("utf8"))

        except Exception:
          self._set_headers()
          tb = traceback.format_exc()
          print(tb)
          self.wfile.write(str(tb).encode("utf8"))


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # change the working directory to the directory of the app
        # this is where the html files are
        os.chdir(self.behaviorAbsolutePath())
        self.server = socketserver.TCPServer(("", PORT), NaoQiHandler)

    def onUnload(self):
        print("Shutting down server ... ")
        self.server.shutdown()
        print("Shutting down server done.")

    def onInput_onStart(self):
        self.logger.info("serving at port: ".format(PORT))
        self.server.serve_forever()
        print("Serving at port: {}".format(PORT))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>