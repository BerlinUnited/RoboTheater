<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="EnableAutonomousMovement" id="5" localization="8" tooltip="" x="355" y="46"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.awareness = ALProxy('ALBasicAwareness')
        self.autonomouslife = ALProxy("ALAutonomousLife")
        self.ft = ALProxy("_ALFastPersonTracking")
        self.tracker = ALProxy("ALTracker")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        if self.awareness:
#            self.awareness.setEngagementMode("Unengaged")
#            self.awareness.setTrackingMode("Head")
#            self.awareness.setStimulusDetectionEnabled('Sound', True)
#            self.awareness.setStimulusDetectionEnabled('Movement', True)
#            self.awareness.setStimulusDetectionEnabled('People', True)
#            self.awareness.setStimulusDetectionEnabled('Touch', True)
            self.awareness.setEnabled(False)
            if not self.awareness.isAwarenessPaused():
                self.awareness.pauseAwareness()
        if self.autonomouslife:
            self.autonomouslife.setAutonomousAbilityEnabled("AutonomousBlinking", False)
            self.autonomouslife.setAutonomousAbilityEnabled("BackgroundMovement", False)
            self.autonomouslife.setAutonomousAbilityEnabled("BasicAwareness", False)
            self.autonomouslife.setAutonomousAbilityEnabled("ListeningMovement", False)
            self.autonomouslife.setAutonomousAbilityEnabled("SpeakingMovement", False)
        if self.ft:
            self.ft.stopTracking()
        if self.tracker:
            self.tracker.unregisterAllTargets()

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>