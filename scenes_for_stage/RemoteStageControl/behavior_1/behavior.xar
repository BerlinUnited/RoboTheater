<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Python Script" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="334" y="43"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[from __future__ import print_function

try:
    import __builtin__
except ImportError:
    # Python 3
    import builtins as __builtin__

globalLogger = None
def print(*args, **kwargs):
    global globalLogger
    if globalLogger is not None:
        globalLogger.log(*args, **kwargs)
    return __builtin__.print(*args, **kwargs)

# note this for Pythong 2.7 and 3.x compatibility
try:
  from SimpleHTTPServer import SimpleHTTPRequestHandler
  import SocketServer as socketserver
except ImportError:
  from http.server import SimpleHTTPRequestHandler
  import socketserver

# this makes it possible to run the script without naqi for testing purposes
try:
  import qi

  HAS_NAOQI = True
except:#ImportError:
  HAS_NAOQI = False


import threading
import traceback
import json

PORT = 8000

# debug stuff
def print_methods(o, log):
  object_methods = [method_name for method_name in dir(o) if callable(getattr(o, method_name))]
  #print(object_methods)
  log.info(object_methods)


#https://stackoverflow.com/questions/956867/how-to-get-string-objects-instead-of-unicode-from-json
# call: json.loads(json_text, object_hook=_byteify)
def _byteify(data, ignore_dicts = False):
    # if this is a unicode string, return its string representation
    if isinstance(data, unicode):
        return data.encode('utf-8')
    # if this is a list of values, return list of byteified values
    if isinstance(data, list):
        return [ _byteify(item, ignore_dicts=True) for item in data ]
    # if this is a dictionary, return dictionary of byteified keys and values
    # but only if we haven't already byteified it
    if isinstance(data, dict) and not ignore_dicts:
        return {
            _byteify(key, ignore_dicts=True): _byteify(value, ignore_dicts=True)
            for key, value in data.iteritems()
        }
    # if it's anything else, return it in its original form
    return data


# global
naoqi = None


class NaoQIManager:
    def __init__(self, session, logger):
      self.session = session
      self.logger = logger
      self.services = {}
      self.services_stop = {}
      self.futures = {}# list of running tasks

      #if HAS_NAOQI:
      #  self.session = module.session()

      # create a connect a local session (in standalone case)
      #self.session = qi.Session()
      #self.session.connect("tcp://localhost:9559")


    def getService(self, service):
        # service is not connected yet
        if not service in self.services:
          self.logger.info("Connect to Proxy: {}".format(service))

          self.logger.info("INFO: Get service: {}".format(service))
          if HAS_NAOQI:
            #self.services[service] = self.session.service(service)
            self.services[service] = ALProxy(service)
            self.services_stop[service] = ALProxy(service, True)
            self.futures[service] = []
          else:
            self.services[service] = None

        return self.services[service]

    @qi.bind(paramsType=(), methodName="stopAll_Future")
    def stopAll_Future(self):
        self.logger.info("[NaoQIManager] stopAll Future")
        n = 0
        for service in self.futures:
            if service != "NaoQIManager":
                for f in self.futures[service]:
                    f.cancel()
                    n += 1
        return "stopAll canceled {} tasks".format(n)

    @qi.bind(paramsType=(), methodName="stopAll")
    def stopAll(self):
        self.logger.info("[NaoQIManager] stopAll Proxy")
        n = 0
        for service in self.futures:
            if service != "NaoQIManager":
                for id in self.futures[service]:
                    self.services_stop[service].stop(id)
                    n += 1
        return "stopAll canceled {} tasks".format(n)

    # make a call to a service
    def call_Future(self, service, call):
        if not HAS_NAOQI:
          print("WARNING: running without naoqi")

        try:
            print("call {}({})".format(service, call))
            if HAS_NAOQI:
              #return self.getService(service).call(*call)
              #http://doc.aldebaran.com/2-5/dev/libqi/guide/py-client.html#guide-py-client
              # calls the function with the _async=True
              name, args = call[0], call[1:]
              future = getattr(self.getService(service), name)(*args, _async=True)
              self.futures[service].append(future)
              future.wait()
              self.futures[service].remove(future)
              return future.value()
        except:
            self.logger.warning("[NaoQIManager] {} execution canceled".format(name))
            return "{}: execution canceled".format(name)
        finally:
            try:
                self.futures[service].remove(future)
            except:
                pass

        return None

    # make a call to a service
    def call(self, service, call):
        if not HAS_NAOQI:
          print("WARNING: running without naoqi")

        try:
            self.logger.info("call {}({})".format(service, call))
            if HAS_NAOQI:
              proxy = self.getService(service)
              name, args = call[0], call[1:]
              return getattr(proxy, name)(*args)
              id = getattr(proxy.post, name)(*args)
              self.futures[service].append(id)
              #self.logger.info("{} wait {}".format(service,id))
              result = proxy.wait(id, 0)
              self.futures[service].remove(id)
              return result
        except Exception as ex:
            self.logger.warning(ex)
            self.logger.warning("[NaoQIManager] {} execution canceled".format(name))
            return "{}: execution canceled".format(name)
        finally:
            try:
                self.futures[service].remove(future)
            except:
                pass

        return None


class NaoQIManagerProxy:
    def __init__(self, session, logger):
        self.session = session
        self.logger = logger

        self.services = {}
        self.services_stop = {}

        self.task_ids = {} # list of running tasks

        # create a connect a local session (in standalone case)
        #self.session = qi.Session()
        #self.session.connect("tcp://localhost:9559")

    def getService(self, service):
        # service is not connected yet
        if not service in self.services:
            self.logger.info("Connect to Proxy: {}".format(service))

            self.services[service] = ALProxy(service)
            self.services_stop[service] = ALProxy(service, True)
            self.task_ids[service] = []

        return self.services[service]

    @qi.bind(paramsType=(), methodName="stopAll")
    def stopAll(self):
        self.logger.info("[NaoQIManager] stopAll Proxy")

        n = 0
        for service in self.task_ids:
            if service != "NaoQIManager":
                for id in self.task_ids[service]:
                    self.services_stop[service].stop(id)
                    n += 1
                self.task_ids[service] = []

        return "stopAll canceled {} tasks".format(n)

    # make a call to a service
    def call(self, service, call):
        try:
            self.logger.info("call {}({})".format(service, call))

            proxy = self.getService(service)
            name, args = call[0], call[1:]

            # hack: synchronized call for the motion
            if service == "ALMotion":
                return getattr(proxy, name)(*args)

            # run commandy asynchronius
            id = getattr(proxy.post, name)(*args)

            # wait for the task to be finished
            self.task_ids[service].append(id)
            #self.logger.info("{} wait {}".format(service,id))
            result = proxy.wait(id, 0)
            self.task_ids[service].remove(id)

            return result

        except Exception as ex:
            self.logger.warning(ex)
            self.logger.warning("[NaoQIManager] {} execution canceled".format(name))
            return "{}: execution canceled".format(name)
        finally:
            try:
                self.task_ids[service].remove(future)
            except:
                pass

        return None


    #http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog_tuto.html
    # EXPERIMENTAL: not used yet
    '''
    def doDialoge(self, call):
        ALDialog = getService("ALDialog")
        ALDialog.setLanguage("English")

        topic_content = ('topic: ~mytopic()\n'
                         'language: enu\n'
                         'proposal: ' + str(call) + '\n')

        topic_name = ALDialog.loadTopicContent(topic_content)
        ALDialog.activateTopic(topic_name)

        ALDialog.subscribe("my_setFocus_test")
        ALDialog.setFocus("mytopic")
        ALDialog.forceOutput()

        ALDialog.unsubscribe("my_setFocus_test")
        ALDialog.deactivateTopic(topic_name)
        ALDialog.unloadTopic(topic_name)
    '''


class NaoQiHandler(SimpleHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    '''
    def do_GET(self):
        #super().do_GET()
        #super(NaoQiHandler, self).do_GET()
        import os
        self._set_headers()
        self.wfile.write(str(path).encode("utf8"))
    '''

    def do_HEAD(self):
        self._set_headers()

    def do_POST(self):
        try:
          # get the length of the data to read
          # python 2.7
          if hasattr(self.headers, 'getheader'):
            length = int(self.headers.getheader('content-length'))
          else: # python 3.x
            length = int(self.headers.get('content-length'))

          data = self.rfile.read(length)

          # parse json data as ascii
          msg = json.loads(data, object_hook=_byteify)
          print(msg)

          # forward the call to global naoqi
          global naoqi
          result = naoqi.call(msg['proxy'], msg['call'])

          # sed a response
          self._set_headers()
          self.wfile.write(str(result).encode("utf8"))

        except Exception:
          self._set_headers()
          trace = traceback.format_exc()
          print(trace)
          self.wfile.write(str(trace).encode("utf8"))

    def log_message(self, format, *args):
        return


class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

        global naoqi
        #naoqi = NaoQIManager(self.session(), self.logger)
        naoqi = NaoQIManagerProxy(self.session(), self.logger)
        #print_methods(self.session(), self.logger)

        try:
            self.idNaoQIManager = self.session().registerService("NaoQIManager", naoqi)
        except ex:
            self.logger.error("[RemoteControlServer] could not register service NaoQIManager")
            #print_methods(self.session().service("NaoQIManager"), self.logger)

        #global globalLogger
        #globalLogger = self.logger

    def onLoad(self):
        # change the working directory to the directory of the app
        # this is where the html files are
        os.chdir(self.behaviorAbsolutePath())

        ThreadedTCPServer.allow_reuse_address = True
        self.server = ThreadedTCPServer(("", PORT), NaoQiHandler)

    def onUnload(self):
        global naoqi
        naoqi.stopAll()

        try:
            self.session().unregisterService(self.idNaoQIManager)
        except:
            self.logger.error("[RemoteControlServer] could not unregister NaoQIManager")

        t = threading.Thread(target=self.server.shutdown)
        self.logger.info("[RemoteControlServer] onUnload: Shutting down server ... ")
        t.start()
        t.join()
        #self.server.shutdown()
        self.logger.info("[RemoteControlServer] onUnload: Shutting down server done.")

    def onInput_onStart(self):
        self.logger.info("[RemoteControlServer] onInput_onStart: Serving at port: {}".format(PORT))
        self.server.serve_forever()
        self.logger.info("[RemoteControlServer] onInput_onStart: Stopped serving at port: {}".format(PORT))
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.logger.info("[RemoteControlServer] onInput_onStop: ---------------- fire onStopped!!")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>